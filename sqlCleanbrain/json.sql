-------------- JSON --------------

CREATE OR REPLACE DIRECTORY UTL_DIR AS 'C:/JSON';
GRANT READ, WRITE ON DIRECTORY UTL_DIR TO public;
/
set serveroutput on;



CREATE OR REPLACE PROCEDURE ExportToJSON IS
v_file UTL_FILE.FILE_TYPE;
v_row Client%ROWTYPE;
BEGIN
    v_file := UTL_FILE.FOPEN('UTL_DIR','Clients.json','W');
    UTL_FILE.PUT_LINE(v_file, '[');
    FOR v_row in (select JSON_OBJECT( 
    Id_client, Name_Client,Surname_Client,Login_Client,Password_Client,Mail_Client
    ) as json_data from Client)   
    LOOP
        UTL_FILE.PUT_LINE(v_file ,v_row.json_data ||  ',');
        END LOOP;
    UTL_FILE.PUT_LINE(v_file, ']');  
    UTL_FILE.FCLOSE(v_file);
    EXCEPTION      
    WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' ||  SQLCODE || ' - ' || SQLERRM); 
            RAISE;
END;
-- execute

BEGIN
    ExportToJSON();
END;

CREATE OR REPLACE FUNCTION file_to_blob(p_file_path IN VARCHAR2) RETURN BLOB IS
    l_blob BLOB;
    l_bfile BFILE;
BEGIN
    -- Открываем BFILE по заданному пути
    l_bfile := BFILENAME('UTL_DIR', p_file_path);
    -- Открываем BFILE для чтения
    DBMS_LOB.FILEOPEN(l_bfile, DBMS_LOB.FILE_READONLY);
    -- Получаем размер файла
    DBMS_LOB.CREATETEMPORARY(l_blob, TRUE);
    DBMS_LOB.LOADFROMFILE(l_blob, l_bfile, DBMS_LOB.GETLENGTH(l_bfile));
    -- Закрываем BFILE
    DBMS_LOB.FILECLOSE(l_bfile);
    -- Возвращаем BLOB
    RETURN l_blob;
EXCEPTION
    WHEN OTHERS THEN
        -- Обработка ошибок
        DBMS_LOB.FILECLOSE(l_bfile);
        RAISE;
END file_to_blob;
/
--bear.jpg

CREATE TABLE Client
(
    Id_client NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Name_Client NVARCHAR2(20) NOT NULL,
    Surname_Client NVARCHAR2(20) NOT NULL,
    Login_Client NVARCHAR2(20) NOT NULL,
    Password_Client NVARCHAR2(20) NOT NULL,
    Photo_Client BLOB,
    Mail_Client NVARCHAR2(30) NOT NULL
);

CREATE OR REPLACE PROCEDURE IMPORT_JSON IS
    photo BLOB;
BEGIN
photo := file_to_blob('bear.jpg');
FOR json_rec IN (
    SELECT Id_client, Name_Client, Surname_Client, Login_Client, Password_Client, Mail_Client 
    FROM JSON_TABLE(BFILENAME('UTL_DIR', 'Clients.json'), '$[*]' COLUMNS (
        Id_client number PATH '$.ID_CLIENT',  
        Name_Client VARCHAR2(20) PATH '$.NAME_CLIENT',
        Surname_Client VARCHAR2(20) PATH '$.SURNAME_CLIENT',
        Login_Client VARCHAR2(20) PATH '$.LOGIN_CLIENT',
        Password_Client VARCHAR2(100) PATH '$.PASSWORD_CLIENT',
        Mail_Client VARCHAR2(30) PATH '$.MAIL_CLIENT'
        )))
    LOOP
        BEGIN
        DBMS_OUTPUT.PUT_LINE('1 ' ||json_rec.id_client || ' ' || json_rec.name_client || ' ' || json_rec.surname_client || ' ' || json_rec.login_client || ' ' || json_rec.password_client || ' ' || json_rec.mail_client); 
        INSERT INTO Client (Id_client, Name_Client, Surname_Client, Login_Client, Password_Client, Photo_Client, Mail_Client)
        VALUES (json_rec.id_client, json_rec.name_client, json_rec.surname_client, json_rec.login_client, json_rec.password_client, photo, json_rec.mail_client);
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN     
                ROLLBACK;
                DBMS_OUTPUT.PUT_LINE('Client with the id already exists.'); 
            WHEN OTHERS THEN
                ROLLBACK;         
                DBMS_OUTPUT.PUT_LINE('Error inserting Client: ' || SQLERRM);
                RAISE;     
            END;
    END LOOP;
END;

begin
    IMPORT_JSON;
end;
